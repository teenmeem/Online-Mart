name: online-mart

services:
  user_producer_svc:
    build:
      context: ./user_producer
      dockerfile: Dockerfile.dev
    volumes:
      - ./user_producer:/app  # Sync local development directory with the container
    depends_on:
        - broker
    ports:
      - "8001:8000"  # Expose container port 8000 to host port 8000  
    profiles: ["user"]

  user_database_svc:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: User_DB_Container
    environment:
      POSTGRES_USER_FILE: /run/secrets/user_db_user
      POSTGRES_PASSWORD_FILE: /run/secrets/user_db_password
      POSTGRES_DB_FILE: /run/secrets/user_database
    secrets:
      - user_db_user
      - user_db_password
      - user_database
    ports:
      - '5433:5432'
    volumes:
      - users_db:/var/lib/postgresql/data
    profiles: ["user"]

  product_database_svc:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: Product_DB_Container
    environment:
      POSTGRES_USER_FILE: /run/secrets/prod_db_user
      POSTGRES_PASSWORD_FILE: /run/secrets/prod_db_password
      POSTGRES_DB_FILE: /run/secrets/prod_database
    secrets:
      - prod_db_user
      - prod_db_password
      - prod_database
    ports:
      - '5434:5432'
    volumes:
      - products_db:/var/lib/postgresql/data
    profiles: ["product"]

  product_producer_svc:
    build:
      context: ./product_producer
      dockerfile: Dockerfile.dev
    volumes:
      - ./product_producer:/app  # Sync local development directory with the container
    depends_on:
        - broker
    ports:
      - "8002:8000"  # Expose container port 8000 to host port 8000
    # profiles: ["product"]
  
  product_consumer_svc:
    build:
      context: ./product_consumer
      dockerfile: Dockerfile.dev
    volumes:
      - ./product_consumer:/app  # Sync local development directory with the container
    depends_on:
        - product_producer_svc
        # - product_database_svc
    ports:
      - "8003:8000"  # Expose container port 8000 to host port 8000
    # profiles: ["product"]

  inventory_database_svc:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: Inventory_DB_Container
    environment:
      POSTGRES_USER_FILE: /run/secrets/inv_db_user
      POSTGRES_PASSWORD_FILE: /run/secrets/inv_db_password
      POSTGRES_DB_FILE: /run/secrets/inv_database
    secrets:
      - inv_db_user
      - inv_db_password
      - inv_database
    ports:
      - '5435:5432'
    volumes:
      - inventory_db:/var/lib/postgresql/data
    profiles: ["inventory--"]

  inventory_producer_svc:
    build:
      context: ./inventory_producer
      dockerfile: Dockerfile.dev
    volumes:
      - ./inventory_producer:/app  # Sync local development directory with the container
    depends_on:
        - broker
    ports:
      - "8003:8000"  # Expose container port 8000 to host port 8000
    profiles: ["inventory"]
  
  inventory_consumer_svc:
    build:
      context: ./inventory_consumer
      dockerfile: Dockerfile.dev
    volumes:
      - ./inventory_consumer:/app  # Sync local development directory with the container
    depends_on:
        - inventory_producer_svc
        # - inventory_database_svc
    ports:
      - "8004:8000"  # Expose container port 8000 to host port 8000
    profiles: ["inventory"]

  broker:
    image: apache/kafka:3.7.0
    hostname: broker
    container_name: broker
    ports:
      - '9092:9092'
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: 'Local Kafka Cluster'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'broker:19092'
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      - broker

secrets:
  user_db_user:
    file: .\Inventory_Services\user_db_user.txt
  user_db_password:
    file: .\Inventory_Services\user_db_password.txt
  user_database:
    file: .\Inventory_Services\user_database.txt

  prod_db_user:
    file: prod_db_user.txt
  prod_db_password:
    file: prod_db_password.txt
  prod_database:
    file: prod_database.txt

  inv_db_user:
    file: inv_db_user.txt
  inv_db_password:
    file: inv_db_password.txt
  inv_database:
    file: inv_database.txt

volumes:
  users_db:
    driver: local
  products_db:
    driver: local
  inventory_db:
    driver: local

networks:
  default:
    driver: bridge
